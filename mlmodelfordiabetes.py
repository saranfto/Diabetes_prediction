# -*- coding: utf-8 -*-
"""MLmodelfordiabetes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H6HhUYqWXPaJ9pwDX82sgxkx2bWeGv47
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score
from matplotlib import pyplot as plt
import pickle

"""Providing Data ( diabetes.csv )

"""

# Importing the data
DiabetesData_1 = pd.read_csv('/content/diabetes.csv')
# Check the Number of rows and columns in the data set
DiabetesData_1.shape

"""We have 768 rows and 9 columns. to check the column name.."""

#displaying the 5 rows of the data
DiabetesData_1.head()

"""Checking the basic Statistics of the Data using description()"""

DiabetesData_1.describe()

DiabetesData_1.mean()

"""Grouping the Outcome and getting mean value of those will give us a Idea that how the Prediction is going to be.

Here the 0 is the " Non Diabetic people " and
     the 1 is the " Diabetic people ".
"""

DiabetesData_1.groupby("Outcome").mean()

"""Dividing the data set into features and labesl  and store them into the variables "Features" and "Label" respectively"""

Features = DiabetesData_1.drop(columns='Outcome', axis=1)
Label = DiabetesData_1['Outcome']

Features.head()

Label.head()

"""Now lets do standardize the data.
In the next few steps , we are going to
1). Fit the data
2). Standardize ( transform the data into a small range )

these steps will make our model to predict high
"""

Stool = StandardScaler()

Stool.fit_transform(Features)

Standarized_Features = Stool.fit_transform(Features)

Features = Standarized_Features
Label = Label

"""Now all the basic data standardization is completed, Let's move to the Training section.

before that, we need to spllit the data into training portion and testing portion. Here is the steps..
"""

Features_train, Features_test, Label_train, Label_test = train_test_split(Features, Label, test_size=0.2, stratify=Label, random_state=2)

print(Features.shape, Features_train.shape, Features_test.shape)

print(Label.shape, Label_train.shape, Label_test.shape)

"""The data splitted successfully, now get into the training session"""

Classifier = svm.SVC(kernel='linear')

Classifier.fit(Features_train, Label_train)

"""Hello shiva sir, since we have a small data set. the training wont take much time to complete"""

#Testing and evaluvating
Features_train_prediction = Classifier.predict(Features_train)
Training_data_accuracy = accuracy_score(Features_train_prediction, Label_train)
print("Traning data accuracy is", Training_data_accuracy)

Features_test_prediction = Classifier.predict(Features_test)
Testing_data_accuracy = accuracy_score(Features_test_prediction, Label_test)
print("Testing data accuracy is", Testing_data_accuracy)

"""We evaluated our modal and that is performing good after some oprimization in data.

Now lets build a predictive system by user's input
"""

input_data = (2,112,66,22,0,25,0.307,24)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

Stooled_data = Stool.transform(input_data_reshaped)
print(Stooled_data)

prediction = Classifier.predict(Stooled_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

"""Saving the Model

"""

file_name = "trained_model.sav"
pickle.dump(Classifier, open(file_name,"wb"))

loaded_model = pickle.load(open("trained_model.sav","rb"))

input_data = (2,112,66,22,0,25,0.307,24)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

Stooled_data = Stool.transform(input_data_reshaped)
print(Stooled_data)

prediction = loaded_model.predict(Stooled_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

